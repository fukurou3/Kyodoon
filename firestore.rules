rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Users collection - ユーザーは自分の情報のみ読み書き可能
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
      
      // バリデーション
      allow create, update: if request.auth != null 
        && request.auth.uid == userId
        && validateUserData(request.resource.data);
    }
    
    // Posts collection - 認証済みユーザーは全投稿閲覧可能、投稿者のみ編集可能
    match /posts/{postId} {
      // 認証済みユーザーは全投稿を読める
      allow read: if request.auth != null;
      
      // 認証済みユーザーは投稿作成可能
      allow create: if request.auth != null 
        && validatePostData(request.resource.data)
        && request.resource.data.userId == request.auth.uid;
      
      // 投稿者のみ自分の投稿を更新・削除可能
      allow update: if request.auth != null 
        && request.auth.uid == resource.data.userId
        && validatePostUpdateData(request.resource.data, resource.data);
      
      allow delete: if request.auth != null 
        && request.auth.uid == resource.data.userId;
      
      // Comments sub-collection
      match /comments/{commentId} {
        allow read: if request.auth != null;
        allow create: if request.auth != null 
          && validateCommentData(request.resource.data)
          && request.resource.data.userId == request.auth.uid;
        allow update: if request.auth != null 
          && request.auth.uid == resource.data.userId
          && validateCommentUpdateData(request.resource.data, resource.data);
        
        allow delete: if request.auth != null 
          && request.auth.uid == resource.data.userId;
      }
      
      // Likes sub-collection
      match /likes/{likeId} {
        allow read: if request.auth != null;
        allow create, delete: if request.auth != null 
          && likeId == request.auth.uid;
      }
    }
    
    // Notifications collection - ユーザーは自分の通知のみアクセス可能
    match /notifications/{notificationId} {
      // 既存通知の読み取り・更新・削除（自分の通知のみ）
      allow read, update, delete: if request.auth != null 
        && request.auth.uid == resource.data.userId;
      
      // 通知作成（厳格な権限制御）
      allow create: if request.auth != null 
        && validateNotificationData(request.resource.data)
        && (
          // 自分宛ての通知作成（テスト用など）
          request.resource.data.userId == request.auth.uid
          // システム通知は管理者のみ作成可能
          || (request.resource.data.type == 'system' && isAdmin())
          // 他ユーザーへの通知（いいね、コメント等）は、
          // サーバーサイドでCloud Functionsを使用して作成することを推奨
          // クライアントからの直接作成は原則禁止
        );
    }
    
    // Reports collection - 認証済みユーザーのみ報告可能
    match /reports/{reportId} {
      allow create: if request.auth != null 
        && validateReportData(request.resource.data)
        && request.resource.data.reporterId == request.auth.uid;
      // 管理者のみ読み取り可能（実装時に管理者判定ロジック追加）
      allow read: if request.auth != null && isAdmin();
    }
    
    // User Preferences collection - ユーザーは自分の設定のみアクセス可能
    match /user_preferences/{userId} {
      // 自分の設定のみ読み取り・更新・削除可能
      allow read, update, delete: if request.auth != null 
        && request.auth.uid == userId;
      
      // 設定作成（初回ログイン時など）
      allow create: if request.auth != null 
        && request.auth.uid == userId
        && validateUserPreferencesData(request.resource.data);
    }
  }
  
  // バリデーション関数
  function validateUserData(data) {
    return data.keys().hasAll(['username', 'email', 'createdAt']) &&
           data.username is string &&
           data.username.size() >= 1 && data.username.size() <= 50 &&
           data.email is string &&
           data.email.matches('.*@.*\\..*') && // 簡易的なメール形式チェック
           data.createdAt is timestamp &&
           // セキュリティ: 管理者権限フィールドの保護
           !data.keys().hasAny(['role', 'permissions', 'isAdmin', 'adminLevel', 'privileges']);
  }
  
  function validatePostData(data) {
    return data.keys().hasAll(['content', 'type', 'userId', 'username', 'createdAt']) &&
           data.content is string &&
           data.content.size() >= 1 && data.content.size() <= 2000 && // 最大2000文字
           data.type is string &&
           data.type in ['casual', 'serious'] &&
           data.userId is string &&
           data.username is string &&
           data.createdAt is timestamp &&
           // 強化されたXSS対策：包括的な危険パターン検証
           !hasAdvancedXSSPatterns(data.content);
  }
  
  // 高度なXSS攻撃パターンを検出する関数
  function hasAdvancedXSSPatterns(content) {
    return (
      // 基本的なscriptタグ（大文字小文字混在対応）
      content.lower().matches('.*<script.*') ||
      content.upper().matches('.*<SCRIPT.*') ||
      
      // JavaScript実行（様々な記法に対応）
      content.lower().matches('.*javascript:.*') ||
      content.lower().matches('.*vbscript:.*') ||
      content.lower().matches('.*data:.*') ||
      
      // イベントハンドラー（包括的）
      content.lower().matches('.*on\\w+\\s*=.*') ||
      content.lower().matches('.*onclick.*') ||
      content.lower().matches('.*onload.*') ||
      content.lower().matches('.*onerror.*') ||
      content.lower().matches('.*onfocus.*') ||
      content.lower().matches('.*onmouseover.*') ||
      content.lower().matches('.*onsubmit.*') ||
      
      // 危険なタグとスキーム
      content.lower().matches('.*<iframe.*') ||
      content.lower().matches('.*<object.*') ||
      content.lower().matches('.*<embed.*') ||
      content.lower().matches('.*<form.*') ||
      content.lower().matches('.*<input.*') ||
      content.lower().matches('.*<meta.*') ||
      content.lower().matches('.*<link.*') ||
      content.lower().matches('.*<style.*') ||
      
      // エンコーディングによるバイパス対策
      content.matches('.*&#.*') ||
      content.matches('.*%[0-9a-fA-F][0-9a-fA-F].*') ||
      content.matches('.*\\\\u[0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F].*') ||
      
      // 制御文字・NULL文字
      content.matches('.*\\x00.*') ||
      content.matches('.*\\n.*<.*') ||
      content.matches('.*\\r.*<.*')
    );
  }
  
  function validateCommentData(data) {
    return data.keys().hasAll(['content', 'userId', 'username', 'createdAt']) &&
           data.content is string &&
           data.content.size() >= 1 && data.content.size() <= 500 &&
           data.userId is string &&
           data.username is string &&
           data.createdAt is timestamp &&
           // 強化されたXSS対策：コメントでも同様の検証を適用
           !hasAdvancedXSSPatterns(data.content);
  }
  
  function validateNotificationData(data) {
    return data.keys().hasAll(['type', 'userId', 'message', 'createdAt', 'isRead']) &&
           data.type is string &&
           data.type in ['like', 'comment', 'follow', 'mention', 'reply', 'repost', 'system'] &&
           data.userId is string &&
           data.message is string &&
           data.message.size() <= 500 &&
           data.createdAt is timestamp &&
           data.isRead is bool &&
           // XSS対策：通知メッセージの危険なタグ検証
           !data.message.matches('.*<script.*') &&
           !data.message.matches('.*javascript:.*') &&
           !data.message.matches('.*onclick.*') &&
           !data.message.matches('.*onerror.*') &&
           !data.message.matches('.*<iframe.*') &&
           !data.message.matches('.*<object.*') &&
           !data.message.matches('.*<embed.*') &&
           // 追加のオプションフィールドのバリデーション
           (!data.keys().hasAny(['fromUserId']) || data.fromUserId is string) &&
           (!data.keys().hasAny(['metadata']) || data.metadata is map) &&
           (!data.keys().hasAny(['updatedAt']) || data.updatedAt is timestamp);
  }
  
  function validateReportData(data) {
    return data.keys().hasAll(['reporterId', 'targetType', 'targetId', 'reason', 'createdAt']) &&
           data.reporterId is string &&
           data.targetType is string &&
           data.targetType in ['post', 'comment', 'user'] &&
           data.targetId is string &&
           data.reason is string &&
           data.reason.size() >= 1 && data.reason.size() <= 500 &&
           data.createdAt is timestamp;
  }
  
  // ユーザー設定データのバリデーション関数
  function validateUserPreferencesData(data) {
    return (
      // 基本フィールドの存在確認
      data.keys().hasAny(['notifications', 'privacy', 'display']) &&
      
      // blockedUsersの検証
      (!data.keys().hasAny(['blockedUsers']) || (
        data.blockedUsers is list &&
        data.blockedUsers.size() <= 1000 && // 最大1000ユーザーまで
        validateUserIdList(data.blockedUsers)
      )) &&
      
      // mutedKeywordsの検証
      (!data.keys().hasAny(['mutedKeywords']) || (
        data.mutedKeywords is list &&
        data.mutedKeywords.size() <= 500 && // 最大500キーワードまで
        validateKeywordList(data.mutedKeywords)
      )) &&
      
      // タイムスタンプの検証
      (!data.keys().hasAny(['updatedAt']) || data.updatedAt is timestamp)
    );
  }
  
  // ユーザーIDリストの検証（簡易版）
  function validateUserIdList(userIds) {
    return userIds is list && userIds.size() <= 1000;
  }
  
  // キーワードリストの検証（簡易版）
  function validateKeywordList(keywords) {
    return keywords is list && keywords.size() <= 500;
  }
  
  // 管理者判定関数 - Firebase Admin Custom Claimsを使用
  function isAdmin() {
    // Firebase Admin Custom Claimsを使用した安全な権限管理
    // Cloud Functions setAdminPrivileges で設定される
    return request.auth != null && 
           request.auth.token.get('admin', false) == true;
  }
  
  // 上級管理者判定関数
  function isSuperAdmin() {
    // Cloud Functions setAdminPrivileges で super_admin レベルで設定される
    return request.auth != null && 
           request.auth.token.get('super_admin', false) == true;
  }
  
  // 特定権限の確認関数
  function hasPermission(permission) {
    // Cloud Functions setAdminPrivileges で permissions 配列に設定される
    return request.auth != null && 
           request.auth.token.get('permissions', []).hasAny([permission]);
  }

  // 投稿更新データの検証関数
  function validatePostUpdateData(newData, currentData) {
    return (
      // 基本的なデータ検証
      validatePostData(newData) &&
      
      // 重要フィールドの変更禁止
      newData.userId == currentData.userId &&  // ユーザーID変更禁止
      newData.type == currentData.type &&      // 投稿タイプ変更禁止
      newData.createdAt == currentData.createdAt && // 作成日時変更禁止
      
      // 認証ユーザーとの一致確認
      newData.userId == request.auth.uid &&
      
      // 更新可能フィールドのみ許可（content, updatedAt など）
      (!newData.keys().hasAny(['likeCount', 'commentCount']) || 
       (newData.likeCount == currentData.likeCount && 
        newData.commentCount == currentData.commentCount)) // カウント系は変更禁止
    );
  }

  // コメント更新データの検証関数
  function validateCommentUpdateData(newData, currentData) {
    return (
      // 基本的なデータ検証
      validateCommentData(newData) &&
      
      // 重要フィールドの変更禁止
      newData.userId == currentData.userId &&     // ユーザーID変更禁止
      newData.createdAt == currentData.createdAt && // 作成日時変更禁止
      
      // 認証ユーザーとの一致確認
      newData.userId == request.auth.uid &&
      
      // 更新可能フィールドは content と updatedAt のみ
      (!newData.keys().hasAny(['likeCount']) || 
       newData.likeCount == currentData.likeCount) // いいね数は変更禁止
    );
  }
}