rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Users collection - ユーザーは自分の情報のみ読み書き可能
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
      
      // バリデーション
      allow create, update: if request.auth != null 
        && request.auth.uid == userId
        && validateUserData(request.resource.data);
    }
    
    // Posts collection - 認証済みユーザーは全投稿閲覧可能、投稿者のみ編集可能
    match /posts/{postId} {
      // 認証済みユーザーは全投稿を読める
      allow read: if request.auth != null;
      
      // 認証済みユーザーは投稿作成可能
      allow create: if request.auth != null 
        && validatePostData(request.resource.data)
        && request.resource.data.userId == request.auth.uid;
      
      // 投稿者のみ自分の投稿を更新・削除可能
      allow update, delete: if request.auth != null 
        && request.auth.uid == resource.data.userId;
      
      // Comments sub-collection
      match /comments/{commentId} {
        allow read: if request.auth != null;
        allow create: if request.auth != null 
          && validateCommentData(request.resource.data)
          && request.resource.data.userId == request.auth.uid;
        allow update, delete: if request.auth != null 
          && request.auth.uid == resource.data.userId;
      }
      
      // Likes sub-collection
      match /likes/{likeId} {
        allow read: if request.auth != null;
        allow create, delete: if request.auth != null 
          && likeId == request.auth.uid;
      }
    }
    
    // Notifications collection - ユーザーは自分の通知のみアクセス可能
    match /notifications/{notificationId} {
      allow read, write: if request.auth != null 
        && request.auth.uid == resource.data.userId;
      allow create: if request.auth != null 
        && validateNotificationData(request.resource.data);
    }
    
    // Reports collection - 認証済みユーザーのみ報告可能
    match /reports/{reportId} {
      allow create: if request.auth != null 
        && validateReportData(request.resource.data)
        && request.resource.data.reporterId == request.auth.uid;
      // 管理者のみ読み取り可能（実装時に管理者判定ロジック追加）
      allow read: if request.auth != null && isAdmin();
    }
  }
  
  // バリデーション関数
  function validateUserData(data) {
    return data.keys().hasAll(['username', 'email', 'createdAt']) &&
           data.username is string &&
           data.username.size() >= 1 && data.username.size() <= 50 &&
           data.email is string &&
           data.email.matches('.*@.*\\..*') && // 簡易的なメール形式チェック
           data.createdAt is timestamp;
  }
  
  function validatePostData(data) {
    return data.keys().hasAll(['content', 'type', 'userId', 'username', 'createdAt']) &&
           data.content is string &&
           data.content.size() >= 1 && data.content.size() <= 2000 && // 最大2000文字
           data.type is string &&
           data.type in ['casual', 'serious'] &&
           data.userId is string &&
           data.username is string &&
           data.createdAt is timestamp &&
           // XSS対策：危険なHTMLタグを含まないかチェック
           !data.content.matches('.*<script.*') &&
           !data.content.matches('.*javascript:.*') &&
           !data.content.matches('.*onclick.*') &&
           !data.content.matches('.*onerror.*');
  }
  
  function validateCommentData(data) {
    return data.keys().hasAll(['content', 'userId', 'username', 'createdAt']) &&
           data.content is string &&
           data.content.size() >= 1 && data.content.size() <= 500 &&
           data.userId is string &&
           data.username is string &&
           data.createdAt is timestamp &&
           // XSS対策
           !data.content.matches('.*<script.*') &&
           !data.content.matches('.*javascript:.*');
  }
  
  function validateNotificationData(data) {
    return data.keys().hasAll(['type', 'userId', 'message', 'createdAt', 'read']) &&
           data.type is string &&
           data.type in ['like', 'comment', 'follow', 'system'] &&
           data.userId is string &&
           data.message is string &&
           data.message.size() <= 200 &&
           data.createdAt is timestamp &&
           data.read is bool;
  }
  
  function validateReportData(data) {
    return data.keys().hasAll(['reporterId', 'targetType', 'targetId', 'reason', 'createdAt']) &&
           data.reporterId is string &&
           data.targetType is string &&
           data.targetType in ['post', 'comment', 'user'] &&
           data.targetId is string &&
           data.reason is string &&
           data.reason.size() >= 1 && data.reason.size() <= 500 &&
           data.createdAt is timestamp;
  }
  
  // 管理者判定関数（実装時に適切な管理者識別ロジックに変更）
  function isAdmin() {
    // TODO: 実際の管理者判定ロジックを実装
    return false; // 現時点では全て false
  }
}