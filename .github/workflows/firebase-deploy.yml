name: Deploy to Firebase

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.24.0'
        channel: 'stable'
    
    - name: Get dependencies
      run: flutter pub get
    
    - name: Run tests
      run: flutter test
    
    - name: Analyze code
      run: flutter analyze
    
    - name: Check formatting
      run: dart format --set-exit-if-changed .

  security-scan:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.24.0'
        channel: 'stable'
    
    - name: Get dependencies
      run: flutter pub get
    
    - name: Run Dart security analysis
      run: |
        # Dartの静的解析でセキュリティ関連の問題をチェック
        dart analyze --fatal-infos --fatal-warnings
        
        # pubspec.yamlの依存関係チェック
        flutter pub deps --json > deps.json
        
        # セキュリティ関連のパターンをgrepで検索
        echo "Checking for potential security issues..."
        
        # APIキーのハードコードチェック
        if grep -r "AIza\|AAAA\|sk_live\|sk_test" lib/ --exclude-dir=.git || true; then
          echo "⚠️  Potential hardcoded API keys found"
        fi
        
        # 危険な関数の使用チェック
        if grep -r "eval\|innerHTML\|outerHTML" lib/ --exclude-dir=.git || true; then
          echo "⚠️  Potentially dangerous functions found"
        fi
        
        echo "Security scan completed"
      continue-on-error: true

  build-and-deploy:
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.24.0'
        channel: 'stable'
    
    - name: Get dependencies
      run: flutter pub get
    
    - name: Create .env file
      run: |
        echo "FIREBASE_API_KEY=${{ secrets.FIREBASE_API_KEY }}" >> assets/.env
        echo "FIREBASE_APP_ID=${{ secrets.FIREBASE_APP_ID }}" >> assets/.env
        echo "FIREBASE_MESSAGING_SENDER_ID=${{ secrets.FIREBASE_MESSAGING_SENDER_ID }}" >> assets/.env
        echo "FIREBASE_PROJECT_ID=${{ secrets.FIREBASE_PROJECT_ID }}" >> assets/.env
        echo "FIREBASE_AUTH_DOMAIN=${{ secrets.FIREBASE_AUTH_DOMAIN }}" >> assets/.env
        echo "FIREBASE_STORAGE_BUCKET=${{ secrets.FIREBASE_STORAGE_BUCKET }}" >> assets/.env
        echo "FIREBASE_MEASUREMENT_ID=${{ secrets.FIREBASE_MEASUREMENT_ID }}" >> assets/.env
    
    - name: Build web
      run: flutter build web --release --web-renderer html
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    - name: Install Firebase CLI
      run: npm install -g firebase-tools
    
    - name: Deploy to Firebase
      run: |
        firebase deploy --only hosting,firestore:rules,storage:rules --token ${{ secrets.FIREBASE_TOKEN }}
      env:
        FIREBASE_CLI_EXPERIMENTS: webframeworks

  staging-deploy:
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.24.0'
        channel: 'stable'
    
    - name: Get dependencies
      run: flutter pub get
    
    - name: Create staging .env file
      env:
        STAGING_API_KEY: ${{ secrets.STAGING_FIREBASE_API_KEY }}
        STAGING_APP_ID: ${{ secrets.STAGING_FIREBASE_APP_ID }}
        STAGING_SENDER_ID: ${{ secrets.STAGING_FIREBASE_MESSAGING_SENDER_ID }}
        STAGING_PROJECT_ID: ${{ secrets.STAGING_FIREBASE_PROJECT_ID }}
        STAGING_AUTH_DOMAIN: ${{ secrets.STAGING_FIREBASE_AUTH_DOMAIN }}
        STAGING_STORAGE_BUCKET: ${{ secrets.STAGING_FIREBASE_STORAGE_BUCKET }}
        STAGING_MEASUREMENT_ID: ${{ secrets.STAGING_FIREBASE_MEASUREMENT_ID }}
        PROD_API_KEY: ${{ secrets.FIREBASE_API_KEY }}
        PROD_APP_ID: ${{ secrets.FIREBASE_APP_ID }}
        PROD_SENDER_ID: ${{ secrets.FIREBASE_MESSAGING_SENDER_ID }}
        PROD_PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID }}
        PROD_AUTH_DOMAIN: ${{ secrets.FIREBASE_AUTH_DOMAIN }}
        PROD_STORAGE_BUCKET: ${{ secrets.FIREBASE_STORAGE_BUCKET }}
        PROD_MEASUREMENT_ID: ${{ secrets.FIREBASE_MEASUREMENT_ID }}
      run: |
        # ステージング環境用の設定（Secretsが未設定の場合は本番環境の値を使用）
        echo "FIREBASE_API_KEY=${STAGING_API_KEY:-$PROD_API_KEY}" >> assets/.env
        echo "FIREBASE_APP_ID=${STAGING_APP_ID:-$PROD_APP_ID}" >> assets/.env
        echo "FIREBASE_MESSAGING_SENDER_ID=${STAGING_SENDER_ID:-$PROD_SENDER_ID}" >> assets/.env
        echo "FIREBASE_PROJECT_ID=${STAGING_PROJECT_ID:-$PROD_PROJECT_ID}" >> assets/.env
        echo "FIREBASE_AUTH_DOMAIN=${STAGING_AUTH_DOMAIN:-$PROD_AUTH_DOMAIN}" >> assets/.env
        echo "FIREBASE_STORAGE_BUCKET=${STAGING_STORAGE_BUCKET:-$PROD_STORAGE_BUCKET}" >> assets/.env
        echo "FIREBASE_MEASUREMENT_ID=${STAGING_MEASUREMENT_ID:-$PROD_MEASUREMENT_ID}" >> assets/.env
    
    - name: Build web
      run: flutter build web --release --web-renderer html
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    - name: Install Firebase CLI
      run: npm install -g firebase-tools
    
    - name: Deploy to Firebase Staging
      env:
        STAGING_PROJECT_ID: ${{ secrets.STAGING_FIREBASE_PROJECT_ID }}
        FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}
        FIREBASE_CLI_EXPERIMENTS: webframeworks
      run: |
        # ステージング環境が設定されていない場合はデフォルトプロジェクトを使用
        if [ -n "$STAGING_PROJECT_ID" ]; then
          firebase use "$STAGING_PROJECT_ID"
        fi
        firebase deploy --only hosting --token "$FIREBASE_TOKEN"